<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[rylwin's blog]]></title>
  <link href="http://rylwin.github.io/atom.xml" rel="self"/>
  <link href="http://rylwin.github.io/"/>
  <updated>2013-09-29T16:20:47-05:00</updated>
  <id>http://rylwin.github.io/</id>
  <author>
    <name><![CDATA[Ryan Winograd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Think about your architecture]]></title>
    <link href="http://rylwin.github.io/blog/2013/09/29/think-about-your-architecture/"/>
    <updated>2013-09-29T16:01:00-05:00</updated>
    <id>http://rylwin.github.io/blog/2013/09/29/think-about-your-architecture</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>Don&rsquo;t just throw all your code in <code>app/models</code>; don&rsquo;t just build a Rails app.
Have another directory that contains all of your domain-specific logic. Put some
thought into how you organize the files in that directory. And there&rsquo;s a rule to
follow: files in this directory must not invoke any Rails-provided methods.</p>

<h2>Write an application for your domain, not a Rails app</h2>

<p>Don&rsquo;t get me wrong. <strong>Rails is fantastic</strong>&mdash;I love it! But my past Rails
projects all eventually suffer from poor architecture and slow tests. <strong>It&rsquo;s not
Rails&#8217; fault, it&rsquo;s mine. I&rsquo;ve been leaning too heavily on Rails this whole
time.</strong> Now I&rsquo;m finally learning how to build great apps that I enjoy working on
long beyond the prototype stage.</p>

<p>The key to building an application with Rails that stands the test of time is to
not use Rails as the defining feature of the application.  <strong>Rails is just a
delivery mechanism and a persistence layer</strong>.  The domain logic should be
separate from Rails. (Thanks to Bob Martin for
<a href="http://youtu.be/WpkDN78P884">motivating me to confront this this issue</a>.)</p>

<p>At the same time, <strong>Rails provides a lot of default goodness out of the box. I
do not want a lot of extra code that re-invents anything</strong> already provided
by Rails. The goal is to achieve an improved architecture without sacrificing
the ease provided by Rails.</p>

<p>I&rsquo;ve split this post into two parts (ignoring this intro). The first is a
high-level explanation of the architecture that I&rsquo;m proposing.  In the second
section, I&rsquo;ll show some of the code I&rsquo;m using to get this all to work.</p>

<h2>The Architecture (from 20k ft)</h2>

<p>The short version: <code>app/models</code> contains my ActiveRecord models and <code>app/lib</code>
contains application / domain-specific logic.</p>

<h3>app/models</h3>

<p>The <strong>classes in <code>app/models</code> should be ActiveRecord classes or classes that
extensively use the ActiveRecord API</strong> (e.g., query-helper classes).
Additionally, code in <strong><code>app/models</code> should know nothing of our domain logic</strong>.
The classes should be focused only on data retrieval and storage. One way to
think of <code>app/models</code> classes is as <strong>facades to the ActiveRecord API</strong>.</p>

<p>I use ActiveRecord models throughout the application, but <strong>I don&rsquo;t write any
code outside of <code>app/models</code> that directly uses an ActiveRecord method</strong>. This
means that, in code outside of <code>app/models</code>, I only invoke standard field
getters/setters and methods that I&rsquo;ve defined on the models.</p>

<p>This approach is a balancing act. For example, I let scaffolded controllers
invoke ActiveRecord methods&mdash;I&rsquo;m not going to spend time updating the default
controllers.  This goes to the point of not creating extra work / reinventing
the wheel.  After all, one could have PORO classes to represent each
ActiveRecord model to the rest of the application, but achieving this would
require a decent amount of work for what may be an almost entirely academic
benefit.</p>

<h3>app/lib</h3>

<p>The <strong><code>app/lib</code> directory contains the business/domain logic</strong>. The code in
<code>app/lib</code> must have <strong>no knowledge of Rails</strong>&mdash;none at all.  <code>app/lib</code> classes
(all POROs) can still use the model classes, but they are not allowed to use any
ActiveRecord API methods (except the field getters/setters). This means direct
invocation of <code>save</code>, <code>create</code>, <code>update_attributes</code>, all querying, etc. is off
limits.</p>

<p>By separating the application logic into a separate directory, I&rsquo;ve found it
much <strong>easier to make good architectural decisions</strong>. A nice benefit of this
approach is that it makes it very easy to write
<a href="http://arrrrcamp.be/videos/corey-haines/fast-rails-tests">fast_specs</a> since I
know that code in <code>app/lib</code> does not have dependencies on Rails or the database.
All models in <code>app/lib</code> have their specs located in a <code>fast_spec</code> directory.</p>

<p>The classes within <code>app/lib</code> are organized into modules. The modules you define
will vary depending on your domain, but I&rsquo;ll share a few of mine from a project
I&rsquo;m working on:</p>

<h4>Integration &ndash; interaction with remote data sources</h4>

<p>Integration classes are responsible for interacting with remote data sources.
These classes have no dependencies on our other classes. The external sources
may be remote APIs, uploaded data files, etc.</p>

<h4>Render &ndash; renders documents in various formats</h4>

<p>Classes in the render module are responsible for rendering non-HTML/JSON views
(e.g., render a PDF, XLS, etc). It is often useful to be able to generate these
files outside of the standard request/response cycle and it&rsquo;s much easier to
test the result when it&rsquo;s just plain Ruby.</p>

<h4>Service &ndash; encapsulates user story logic</h4>

<p>Service classes encapsulate the logic of our user stories (or parts of stories).
The service classes decrease complexity and coupling in the system by their
organization and by providing interaction between the persistence layer
(<code>app/models</code>) and the domain logic layer (<code>app/lib</code>). Service classes may
invoke other service classes to build more complex behaviors.</p>

<h4>Util &ndash; code not relevant to our domain</h4>

<p>Any code unrelated to our specific domain gets placed here (e.g., I have a class
that converts XLSB files to XLS and another that compares hashes). Anything you
throw in here might be a good candidate for a gem!</p>

<h2>This sounds awesome. How can I do it? (i.e., the code)</h2>

<h3>Setting up <code>app/lib</code></h3>

<p>Add the following to config/application.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">+=</span> <span class="sx">%W(</span><span class="si">#{</span><span class="n">config</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="sx">/app/lib)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all you need to do in order to begin adding code into <code>app/lib</code>! Here&rsquo;s
what my <code>app/lib</code> looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>integration/    render/     service/    util/
</span><span class='line'>integration.rb  render.rb   service.rb  util.rb
</span></code></pre></td></tr></table></div></figure>


<p>Each folder (module) has a simple file with the same name that creates the
module. E.g.,:</p>

<figure class='code'><figcaption><span>service.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Service</span><span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setting up <code>fast_spec</code></h3>

<p>For the corresponding fast_specs, add a <code>fast_spec</code> directory at the top level
of your project. Then add a file <code>fast_spec/spec_fast_helper.rb</code>:</p>

<figure class='code'><figcaption><span>fast_spec/spec_fast_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'><span class="c1"># require &#39;other gems from your bundle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">root</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s1">&#39;..&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Set up any configuration here...</span>
</span><span class='line'><span class="c1"># I18n.load_path = [File.join(root, &#39;config&#39;, &#39;locales&#39;, &#39;en.yml&#39;)]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Require your app/lib folder. You may need to require some classes first</span>
</span><span class='line'><span class="c1"># depending on how you&#39;ve set up your class hierarchy.</span>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;lib&#39;</span><span class="p">,</span> <span class="s1">&#39;**&#39;</span><span class="p">,</span> <span class="s1">&#39;*.rb&#39;</span><span class="p">)</span><span class="o">].</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">lib</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="n">lib</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also added a rake task so that I can <code>rake fast</code>:</p>

<figure class='code'><figcaption><span>lib/tasks/000_fast.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Run fast specs&quot;</span>
</span><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:fast</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">task</span><span class="o">|</span>
</span><span class='line'>  <span class="n">task</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;fast_spec/**/*_spec.rb&#39;</span>
</span><span class='line'>  <span class="n">task</span><span class="o">.</span><span class="n">rspec_opts</span> <span class="o">=</span> <span class="s1">&#39;-Ifast_spec&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="ss">:fast</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now in each fast_spec file just <code>require 'spec_fast_helper'</code>. If you like guard,
check out <a href="https://github.com/shutl/guard-fast_spec">guard-fast_spec</a>. And if
you haven&rsquo;t been using guard because your tests have been too slow, try it
again.  When your tests are this fast you&rsquo;ll love it.</p>

<p>When I need to include ActiveRecord models in the tests, I just use stubs. The
danger here is that your specs become out of sync with your models, but a decent
integration test suite should catch these issues.</p>

<p>Since all the complicated logic is contained in <code>fast_spec</code>, the specs in <code>spec</code>
are all simple. Really simple. Which means that those specs run decently fast:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>rake spec
</span><span class='line'><span class="c"># output truncated</span>
</span><span class='line'>...............................................................................
</span><span class='line'>...............................................................................
</span><span class='line'>...............................................................................
</span><span class='line'>...............................................................................
</span><span class='line'>..................................
</span><span class='line'>
</span><span class='line'>Finished in 6.82 seconds
</span><span class='line'>350 examples, 0 failures
</span><span class='line'>
</span><span class='line'>rake spec  19.44s user 1.62s system 93% cpu 22.624 total
</span></code></pre></td></tr></table></div></figure>


<p>And the <code>fast_specs</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>rake fast
</span><span class='line'><span class="c"># output truncated</span>
</span><span class='line'>...............................................................................
</span><span class='line'>...............................................................................
</span><span class='line'>........
</span><span class='line'>
</span><span class='line'>Finished in 1.09 seconds
</span><span class='line'>166 examples, 0 failures
</span><span class='line'>
</span><span class='line'>rake fast  7.91s user 0.77s system 98% cpu 8.798 total
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s still a young app so there aren&rsquo;t a ton of specs, but I think you get the
idea.</p>

<h2>Minimal changes, big results</h2>

<p>This simple organizational change (along with the associated rules) makes it
easier for me to employ good OOP design principles in my projects that use
Rails, yet I&rsquo;m still able to reap the benefit of Rails (which is plenty!).</p>

<p>Let me know if you like this idea. If there&rsquo;s interest, I&rsquo;ll write some
follow-up posts with code samples that demonstrate how I&rsquo;m using this <code>app/lib</code>
organization to write cleaner, more modular code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop writing JS for nested attributes]]></title>
    <link href="http://rylwin.github.io/blog/2013/07/29/stop-writing-js-for-nested-attributes/"/>
    <updated>2013-07-29T20:41:00-05:00</updated>
    <id>http://rylwin.github.io/blog/2013/07/29/stop-writing-js-for-nested-attributes</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been re-writing/copying the same JS to deal with adding/removing nested
attributes for far too long. On a project I recently started, I was fortunate
enough to stumble across
<a href="https://github.com/patbenatar/jquery-nested_attributes">
patbenatar/jquery-nested_attributes</a>. This jquery plugin makes handling
nested objects a cinch.</p>

<p>The simplest usage looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&quot;</span><span class="err">#</span><span class="s">container&quot;</span><span class="p">).</span><span class="nx">nestedAttributes</span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">bindAddTo: </span><span class="nx">$</span><span class="p">(</span><span class="s">&quot;</span><span class="err">#</span><span class="s">add_another&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, <code>#container</code> refers to a DOM element whose immediate
descendants are considered to be sets of nested attributes. When the user
clicks the link referenced by <code>#add_another</code> the plugin automatically clones a
set of fields and appends to the DOM.</p>

<p>In case you need a bit more flexibility, there are a slew of options available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">collectionName</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>         <span class="c1">// If not provided, we will attempt to autodetect. Provide this for complex collection names</span>
</span><span class='line'>  <span class="nx">bindAddTo</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>              <span class="c1">// Required unless you are implementing your own add handler (see API below). The single DOM element that when clicked will add another set of fields</span>
</span><span class='line'>  <span class="nx">removeOnLoadIf</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>         <span class="c1">// Function. It will be called for each existing item, return true to remove that item</span>
</span><span class='line'>  <span class="nx">collectIdAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>     <span class="c1">// Attempt to collect Rail&#39;s ID attributes</span>
</span><span class='line'>  <span class="nx">beforeAdd</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>              <span class="c1">// Function. Callback before adding an item</span>
</span><span class='line'>  <span class="nx">afterAdd</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>               <span class="c1">// Function. Callback after adding an item</span>
</span><span class='line'>  <span class="nx">beforeMove</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>             <span class="c1">// Function. Callback before updating indexes on an item</span>
</span><span class='line'>  <span class="nx">afterMove</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>              <span class="c1">// Function. Callback after updating indexes on an item</span>
</span><span class='line'>  <span class="nx">beforeDestroy</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>          <span class="c1">// Function. Callback before destroying an item</span>
</span><span class='line'>  <span class="nx">afterDestroy</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>           <span class="c1">// Function. Callback after destroying an item</span>
</span><span class='line'>  <span class="nx">destroySelector</span><span class="o">:</span> <span class="s1">&#39;.destroy&#39;</span><span class="p">,</span>   <span class="c1">// Pass in a custom selector of an element in each item that will destroy that item when clicked</span>
</span><span class='line'>  <span class="nx">deepClone</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>               <span class="c1">// Do you want jQuery to deep clone the element? Deep clones preserve events. Undesirable when using BackBone views for each element.</span>
</span><span class='line'>  <span class="nx">$clone</span><span class="o">:</span> <span class="kc">null</span>                   <span class="c1">// Pass in a clean element to be used when adding new items. Useful when using plugins like jQuery UI Datepicker or Select2. Use in conjunction with `afterAdd`.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my case, I am using select2 to provide some fancy select elements. The only
problem was select2 wasn&rsquo;t playing nice&mdash;I couldn&rsquo;t unbind select2 from the
select element and as a result pressing the &ldquo;add another&rdquo; link made the form
unusable. After a quick iteration with the plugin&rsquo;s author on github, I learned
about the <code>$clone</code> option. You can use <code>$clone</code> to pass in a &ldquo;clean&rdquo; element
that will get appended to the DOM when the &ldquo;add another&rdquo; link is pressed.</p>

<p>To take advantage of the <code>$clone</code> option you just have to get a copy of your
DOM element before binding any other JS to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">clone = </span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;.nested-object-fields:first&#39;</span><span class="p">).</span><span class="nx">clone</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&quot;.container&quot;</span><span class="p">).</span><span class="nx">nestedAttributes</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">bindAddTo: </span><span class="nx">$</span><span class="p">(</span><span class="s">&quot;.add-another&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">$clone: </span><span class="nx">clone</span>
</span><span class='line'>  <span class="nv">afterAdd: </span><span class="nf">(el) -&gt;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deleting items is just as easy. I got tripped up by having a hidden field for
<code>_destroy</code>. You don&rsquo;t need it! You just need to have an element with
<code>"destroy"</code> as the class. When this element is clicked the plugin automatically
adds the <code>_destroy</code> hidden field for you.</p>

<p>I can&rsquo;t imagine an easier way to manage nested attributes. Thanks, @patbenatar,
for an awesome plugin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Perfect Remote Pair Environment]]></title>
    <link href="http://rylwin.github.io/blog/2013/06/25/perfect-remote-pair-environment/"/>
    <updated>2013-06-25T10:37:00-05:00</updated>
    <id>http://rylwin.github.io/blog/2013/06/25/perfect-remote-pair-environment</id>
    <content type="html"><![CDATA[<p>I recently started working with a remote programmer and quickly realized we
needed an effective way to pair remotely. Using a ssh, vim, and tmux (along
with some other nifty tools) I was able to set up a powerful pair environment
in minutes. Here are the steps:</p>

<h2>1. Have a box you can SSH into</h2>

<p>I like using
<a href="http://www.linode.com/?r=baecb63cb7bb6144d5328e91159225e45e876115">Linode</a>
(full disclosure: that link has a referral code), but any *nix box you can SSH
into will do. All following instructions are to be performed on your remote
box, unless otherwise specified.</p>

<h2>2. Create a new user account</h2>

<p>The first thing I did was add a new user called &lsquo;pair&rsquo; to a Linode I use for
development.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add_user pair</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve seen ways to <a href="http://readystate4.com/2011/01/02/sharing-remote-terminal-session-between-two-users-with-tmux/">share tmux sessions between two user
accounts</a>,
but then I cannot let my pair wrap up work on <em>my</em> tmux session without
watching them (I have trust issues). But using an account just for pairing
means:</p>

<ul>
<li>no worries about pair partner messing with my personal files</li>
<li>it&rsquo;s easy to have config files tweaked for pairing</li>
<li>I can let pair partners log in via their public key (they don&rsquo;t need the
password and I can remove their key at any time)</li>
</ul>


<h2>3. Configure tmux / vim</h2>

<p>For those who aren&rsquo;t aware, <a href="http://tmux.sourceforge.net/">tmux</a> is a termainal
multiplexer&mdash;it lets you easily switch between programs in one terminal. It&rsquo;s a
fantastic piece of software and if you haven&rsquo;t used it before I highly
recommend you take a look.</p>

<p>After setting up the user I copied over my vimrc and tmux configurations from
my dotfiles repo. One issue is that users (like myself) prefer their own
configss. The nice thing about having a separate pair account is that it&rsquo;s
easier to compromise on config changes. After all, it&rsquo;s not a change to <em>my</em>
vimrc, it&rsquo;s our shared vimrc.</p>

<p>My pair partner is a big fan of the <a href="http://vimbits.com/bits/180">jk smash</a> to
switch back to normal mode.  When we were pairing, his instincts would take
over and he would add &lsquo;jk&rsquo; to the end of lines of code. I told him just
to add it in to the vimrc, and that was that.</p>

<p>Note: Screen would also work fine instead of tmux. As would emacs or any other
terminal editor in place of vim. But tmux/vim is my preference.</p>

<h2>4. SSH Keys</h2>

<p>No need to give out the password to the pair account. Just ask your pair for
their SSH key and copy it over yourself. Paste it into ~/.ssh/authorized_keys
within your pair account. If you ever want to revoke their access, just remove
their key (note that this won&rsquo;t close an existing session).</p>

<h2>5. Local SSH Config / Port Forwarding</h2>

<p>I mostly work on Rails apps. Though we are often just looking at code and
running tests while in the pair environment, it&rsquo;s sometimes helpful to interact
with the app in the browser to diagnose issues and check behavior. With port
forwarding, we can run the dev Rails server in our pair environment and access
it using our browsers locally.</p>

<p>The ssh command to log in with forwarding looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh pair@server.url -L 3000:127.0.0.1:3000</span></code></pre></td></tr></table></div></figure>


<p>With this port forwarding, I can open my browser and go to <code>localhost:3000</code> to
access the dev Rails server running on the remote box. That&rsquo;s quite a bit to
type out every time, so I added an alias to my <code>.ssh/config</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host pair
</span><span class='line'>  HostName server.url
</span><span class='line'>  User pair
</span><span class='line'>  LocalForward 3000 127.0.0.1:3000</span></code></pre></td></tr></table></div></figure>


<p>Wit the alias I can log in with just <code>ssh pair</code>.</p>

<h2>6. Git Pairing</h2>

<p>When we pair it&rsquo;s nice to have the git log reflect that we worked together on a
piece of code. Fortunately, the
<a href="https://github.com/glg/git-pairing">git-pairing</a> gem makes this easy. It
allows you to pre-define several pair partners who you can identify by their
initials. When you want to commit as a pair, just type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pair initials1 initials2</span></code></pre></td></tr></table></div></figure>


<p>And when you&rsquo;re working solo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git solo</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>The pair environment + a phone call / skype makes working remotely incredibly
easy. I&rsquo;ve found this setup to be just as easy as working side-by-side in
person. Perhaps even better, because when we&rsquo;re done pairing I can logout of
the pair server and get right back to working locally.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending emails via Gmail as "another person"]]></title>
    <link href="http://rylwin.github.io/blog/2012/04/19/sending-emails-via-gmail-as-another-person/"/>
    <updated>2012-04-19T18:52:00-05:00</updated>
    <id>http://rylwin.github.io/blog/2012/04/19/sending-emails-via-gmail-as-another-person</id>
    <content type="html"><![CDATA[<p>Recently, I needed to find a way to send emails from a web-based application so
that it seemed, to the recipient, as if the user initiating the action was
doing the sending (as opposed to the application). Gmail, however, prevents
spoofing of emails: If you set the &ldquo;from&rdquo; field to an email address that
differs from the actual email address of the account you are using to send,
Gmail automatically resets the &ldquo;from&rdquo; field to the account email address.</p>

<p>What you can do, however, is tell Gmail what the name <em>should</em> be: &ldquo;Bob
Smith&rdquo; &lt;app-email-account@example.com&gt;. Then you can also set the
reply-to to the user&rsquo;s actual email address: <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#98;&#x6f;&#98;&#46;&#x73;&#109;&#105;&#116;&#104;&#x40;&#101;&#120;&#97;&#109;&#x70;&#108;&#101;&#46;&#x63;&#x6f;&#109;&#x2e;">&#x62;&#x6f;&#x62;&#46;&#115;&#109;&#105;&#x74;&#x68;&#64;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;&#46;</a> Now when an
email sent with a from/reply-to as described above arrives in my inbox, I see
that I&rsquo;ve received an email from Bob Smith (from the account
app-email-account@example.com, but only if I look at the details). When I hit
reply, the &ldquo;to&rdquo; field of my email is set to <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#98;&#x6f;&#x62;&#x2e;&#115;&#109;&#105;&#x74;&#104;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#x2e;&#99;&#x6f;&#x6d;&#46;">&#x62;&#x6f;&#x62;&#x2e;&#115;&#109;&#x69;&#x74;&#104;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;&#x2e;</a></p>

<p>To clarify, the from/reply-to fields should look as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>From:     "Bob Smith" &lt;app-email-account@example.com&gt;
</span><span class='line'>Reply-To: bob.smith@example.com</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Skip reloading fixtures each time you run your Rails tests]]></title>
    <link href="http://rylwin.github.io/blog/2012/02/04/skip-reloading-fixtures-each-time-you-run-your-rails-tests/"/>
    <updated>2012-02-04T18:55:00-06:00</updated>
    <id>http://rylwin.github.io/blog/2012/02/04/skip-reloading-fixtures-each-time-you-run-your-rails-tests</id>
    <content type="html"><![CDATA[<p>Everyone wants their tests to run faster. I want my tests to run faster. That&rsquo;s why I&rsquo;ve been using <a href="https://github.com/grosser/parallel">parallel</a> when I need to run my whole test suite (or at least a large part of it, e.g., unit tests). And <a href="https://github.com/myronmarston/vcr">VCR</a> makes it really easy to record HTTP interactions to play back later, which means your tests will run faster and will pass even when you&rsquo;re not online.</p>

<p>A lot of the time I just want to run a single test file (or single test method)—and this, for me, takes an annoyingly long time. If you have a lot of fixtures like I do, then you may want to read on. Let&rsquo;s start with the test benchmarks.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% time ruby test/unit/letter_test.rb
</span><span class='line'>Loaded suite test/unit/letter_test
</span><span class='line'>Started
</span><span class='line'>..........
</span><span class='line'>Finished in 7.705702 seconds.
</span><span class='line'>
</span><span class='line'>10 tests, 10 assertions, 0 failures, 0 errors
</span><span class='line'>10.80s user 1.90s system 15.393 total</span></code></pre></td></tr></table></div></figure>


<p>Fifteen whole seconds to wait for a simple set of unit tests to run! and most of that time is spent just preparing to run the tests. My first step was to use <a href="https://github.com/sporkrb/spork.git">spork</a>, which speeds up testing by preloading the Rails env and forking when you want to run your tests.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% testdrb test/unit/letter_test.rb
</span><span class='line'>Loaded suite letter_test.rb
</span><span class='line'>Started
</span><span class='line'>..........
</span><span class='line'>Finished in 8.642509 seconds.
</span><span class='line'>
</span><span class='line'>10 tests, 10 assertions, 0 failures, 0 errors
</span><span class='line'>0.12s user 0.04s system 9.052 total</span></code></pre></td></tr></table></div></figure>


<p>Quite an improvement! Spork shaved off about 6s from the total time to run the test just by preloading the Rails env.</p>

<p>But 9s is still along time to run a few simple tests. Digging through test.log I realized an absurd amount of time was being spent loading in fixtures.* The worst part is that there is really no need to reload the fixtures into the DB once they are in there as long as you are using transactional fixtures—I only need Rails to know which fixtures are present so I can easily access the AR objects I need by the names they have in the fixtures. This part doesn&rsquo;t take long at all. Most of the time loading in fixtures is spent putting them in the DB.</p>

<p>After some digging through ActiveSupport::TestCase and finding my way into ActiveRecord::Fixtures, I realized that if I could stub out the database adapter methods that are used to load in the fixtures then I could get the benefit of having Rails know which fixtures exist without actually spending the time to reload them into the database. Here&rsquo;s how I modified my test/test_helper.rb to achieve this using <a href="https://github.com/floehopper/mocha">mocha</a> (only relevant code shown):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../config/environment&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/test_help&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mocha&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">unless</span> <span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;SKIP_FIXTURES&quot;</span><span class="o">]||</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;SF&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="c1"># Make sure to stub whatever adapter corresponds to your test db</span>
</span><span class='line'>  <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:ConnectionAdapters</span><span class="o">::</span><span class="no">Mysql2Adapter</span><span class="o">.</span><span class="n">any_instance</span><span class="o">.</span><span class="n">stubs</span><span class="p">(</span><span class="ss">:delete</span><span class="p">)</span><span class="o">.</span><span class="n">returns</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:ConnectionAdapters</span><span class="o">::</span><span class="no">Mysql2Adapter</span><span class="o">.</span><span class="n">any_instance</span><span class="o">.</span><span class="n">stubs</span><span class="p">(</span><span class="ss">:insert_fixture</span><span class="p">)</span><span class="o">.</span><span class="n">returns</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="n">fixtures</span> <span class="ss">:all</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:ConnectionAdapters</span><span class="o">::</span><span class="no">Mysql2Adapter</span><span class="o">.</span><span class="n">any_instance</span><span class="o">.</span><span class="n">unstub</span><span class="p">(</span><span class="ss">:delete</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:ConnectionAdapters</span><span class="o">::</span><span class="no">Mysql2Adapter</span><span class="o">.</span><span class="n">any_instance</span><span class="o">.</span><span class="n">unstub</span><span class="p">(</span><span class="ss">:insert_fixture</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># other stuff...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when I run my test with the DB methods stubbed out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% time SF=true ruby test/unit/letter_test.rb
</span><span class='line'>Loaded suite test/unit/letter_test
</span><span class='line'>Started
</span><span class='line'>..........
</span><span class='line'>Finished in 2.664011 seconds.
</span><span class='line'>
</span><span class='line'>10 tests, 10 assertions, 0 failures, 0 errors
</span><span class='line'>7.96s user 1.70s system 10.562 total
</span></code></pre></td></tr></table></div></figure>


<p>And with spork (must start the spork server w/ SF=true):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% time testdrb test/unit/letter_test.rb
</span><span class='line'>Loaded suite letter_test.rb
</span><span class='line'>Started
</span><span class='line'>..........
</span><span class='line'>Finished in 3.351071 seconds.
</span><span class='line'>
</span><span class='line'>10 tests, 10 assertions, 0 failures, 0 errors
</span><span class='line'>0.14s user 0.01s system 3.574 total
</span></code></pre></td></tr></table></div></figure>


<p>So by using spork and skipping loading fixtures every time I was able to go
from 15s to ~3.5s. I can live with that. I can be productive with that.</p>

<p>* This app was started a long, long time ago and migrating to factories would
  be way too painful.</p>
]]></content>
  </entry>
  
</feed>
